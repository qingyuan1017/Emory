 
* *********************************************************************************
* Qingyuan Zhang
* 1977923
* I worked on this assignment alone, using only this semester's course materials.
***********************************************************************************


* ====================================================================
* Do not touch the following xdef:
* ====================================================================
        xdef F



* **************************************************************************
* You can add more xdef directives above if you need more external labels
*
* - Remember that you can only add a label as a break point (stop location) 
*   in EGTAPI if the label has been xdef'ed !!!
*
* - And I am pretty sure you will need to use break point for debugging 
* - in this project... So add more xdef above to export your breakpoints
* **************************************************************************

F:
	move.l a6, -(a7)
	move.l a7,a6
	suba.l #8, a7

	move.l 16(a6), d0 	* d0 = i
	move.l d0, i
	move.l 12(a6), d1 	* d1 = j
	move.l d1, j
	move.l 8(a6), d2  	* d2 = k
	move.l d2, k
	
ifstart:
	cmp.l #0, d0
	ble if_then_part
	cmp.l #0, d1
	bgt else_if_part

if_then_part:
	move.l #1, d0
	move.l a6,a7
	move.l (a7)+, a6

	rts

else_if_part:
	add.l d2,d0
	cmp.l d1,d0
	bge else_part
	

else_if_then_part
	move.l 16(a6), d0	* d0 = i
	move.l 12(a6), d1	* d1 = j
	add.l d1, d0

	move.l a6,a7
	move.l (a7)+, a6

	rts
	
else_part:
	move.l 16(a6), d0
	move.l #0, -4(a6)
	move.l -4(a6), d3 	* d3 = s
	move.l #1, -8(a6)
	move.l -8(a6), d4	* d4 = t	

whilestart:
	move.l 16(a6), d0	* d0 = i
	move.l d0, i
	move.l 12(a6), d1	* d1 = j
	move.l d1, j
	move.l 8(a6), d2	* d2 = k
	move.l d2, k
	

	cmp d2, d4
	bge whileend
	sub.l d4,d0
	move.l d0, -(a7)
	
	sub.l d4, d1
	move.l d1, -(a7)
	
	sub.l #1, d2
	move.l d2, -(a7)
	

	bsr F
	adda.l #12, a7

	add.l d0,d3
	add.l #2,d3
	move.l d3,d0
	add.l #1, d4
	bra whilestart
	
whileend:
	move.l d3,d0
	move.l a6,a7
	move.l (a7)+, a6


	rts
	
	
* ********************************************************************
* Put your (recursive) function F here 
*
* F receives the parameters i, j, k on the stack
* F returns the function value in register d0
*
* Make sure you use the "rts" instruction to return to the caller
* Also: Make sure you DE-ALLOCATE the local variables and restore a6
*       BEFORE you return to the caller !!!
* ********************************************************************

i: ds.l	1
j: ds.l	1
k: ds.l 1





*====================================================================
* Don't add anything below this line...
* ====================================================================
        end
