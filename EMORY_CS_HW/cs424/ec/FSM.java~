package extracredit;

import java.io.*;
import java.util.*;
public class FSM {
public enum States {q5,q4,q1,q3,q2,q0,}
public static StringBuilder sb = new StringBuilder();

public static void main(String args[]) throws IOException{
	
	FileInputStream file = new FileInputStream(args[0]);
	BufferedReader keyboard = new BufferedReader(new InputStreamReader(file));
	
	String line = null;
	
	while ((line = keyboard.readLine()) != null) {


		StringTokenizer st = new StringTokenizer(line," ");
		
		while(st.hasMoreTokens()){
			String v = st.nextToken();
			
			
		}
		
	}
	
}

public static void tokenize(String s) throws IOException{
	if(s.length() == 1)
		sb.append(s);
	else{ 
		for(int i =0; i<s.length(); i++){
			String v = s.substring(0,i);
			test(v);
			String r = s.substring(i, s.length()-1);
			tokenize(r);
	
		}
		
	}
	
}
public static boolean test(String args) throws IOException{

Set<Character> Alphabet = new HashSet<Character>();
Alphabet.add('f');
Alphabet.add('d');
Alphabet.add('e');
Alphabet.add('b');
Alphabet.add('c');
Alphabet.add('a');
Alphabet.add('*');
Alphabet.add('+');
Alphabet.add('l');
Alphabet.add('j');
Alphabet.add('/');
Alphabet.add('k');
Alphabet.add('h');
Alphabet.add('-');
Alphabet.add('i');
Alphabet.add('w');
Alphabet.add('v');
Alphabet.add('1');
Alphabet.add('0');
Alphabet.add('s');
Alphabet.add(';');
Alphabet.add('~');
Alphabet.add('=');
States state = States.q0;
Set<States> Accepts = new HashSet<States>();
Accepts.add(States.q5);
char ch;
for(int j=0; j< args.length(); j++){
	ch = args.charAt(j);
	System.out.println(ch);
if(! Alphabet.contains(ch)){
System.out.println("invalid character" + ch);
System.exit(0);
}
switch (state){
case q5:
if(ch == 'f') state = States.q1;
if(ch == 'd') state = States.q1;
if(ch == 'e') state = States.q1;
if(ch == 'b') state = States.q1;
if(ch == 'c') state = States.q1;
if(ch == 'a') state = States.q1;
if(ch == '*') state = States.q1;
if(ch == '+') state = States.q1;
if(ch == 'l') state = States.q1;
if(ch == 'j') state = States.q1;
if(ch == '/') state = States.q1;
if(ch == 'k') state = States.q1;
if(ch == 'h') state = States.q1;
if(ch == 'i') state = States.q1;
if(ch == '-') state = States.q1;
if(ch == 'w') state = States.q1;
if(ch == 'v') state = States.q1;
if(ch == '1') state = States.q1;
if(ch == '0') state = States.q1;
if(ch == 's') state = States.q1;
if(ch == ';') state = States.q1;
if(ch == '~') state = States.q1;
if(ch == '=') state = States.q1;
break;
case q1:
if(ch == 'f') state = States.q1;
if(ch == 'd') state = States.q1;
if(ch == 'e') state = States.q1;
if(ch == 'b') state = States.q1;
if(ch == 'c') state = States.q1;
if(ch == 'a') state = States.q1;
if(ch == '*') state = States.q1;
if(ch == '+') state = States.q1;
if(ch == 'l') state = States.q1;
if(ch == 'j') state = States.q1;
if(ch == '/') state = States.q1;
if(ch == 'k') state = States.q1;
if(ch == 'h') state = States.q1;
if(ch == 'i') state = States.q1;
if(ch == '-') state = States.q1;
if(ch == 'w') state = States.q1;
if(ch == 'v') state = States.q1;
if(ch == '1') state = States.q1;
if(ch == '0') state = States.q1;
if(ch == 's') state = States.q1;
if(ch == ';') state = States.q1;
if(ch == '~') state = States.q1;
if(ch == '=') state = States.q1;
break;
case q0:
if(ch == 'f') state = States.q1;
if(ch == 'd') state = States.q1;
if(ch == 'e') state = States.q1;
if(ch == 'b') state = States.q1;
if(ch == 'c') state = States.q1;
if(ch == 'a') state = States.q1;
if(ch == '*') state = States.q1;
if(ch == '+') state = States.q1;
if(ch == 'l') state = States.q1;
if(ch == 'j') state = States.q1;
if(ch == '/') state = States.q1;
if(ch == 'k') state = States.q1;
if(ch == 'h') state = States.q1;
if(ch == 'i') state = States.q2;
if(ch == '-') state = States.q1;
if(ch == 'w') state = States.q1;
if(ch == 'v') state = States.q1;
if(ch == '1') state = States.q1;
if(ch == '0') state = States.q1;
if(ch == 's') state = States.q1;
if(ch == ';') state = States.q1;
if(ch == '~') state = States.q3;
if(ch == '=') state = States.q1;
break;
case q2:
if(ch == 'f') state = States.q4;
if(ch == 'd') state = States.q1;
if(ch == 'e') state = States.q1;
if(ch == 'b') state = States.q1;
if(ch == 'c') state = States.q1;
if(ch == 'a') state = States.q1;
if(ch == '*') state = States.q1;
if(ch == '+') state = States.q1;
if(ch == 'l') state = States.q1;
if(ch == 'j') state = States.q1;
if(ch == '/') state = States.q1;
if(ch == 'k') state = States.q1;
if(ch == 'h') state = States.q1;
if(ch == 'i') state = States.q1;
if(ch == '-') state = States.q1;
if(ch == 'w') state = States.q1;
if(ch == 'v') state = States.q1;
if(ch == '1') state = States.q1;
if(ch == '0') state = States.q1;
if(ch == 's') state = States.q1;
if(ch == ';') state = States.q1;
if(ch == '~') state = States.q1;
if(ch == '=') state = States.q1;
break;
case q4:
if(ch == 'f') state = States.q1;
if(ch == 'd') state = States.q1;
if(ch == 'e') state = States.q1;
if(ch == 'b') state = States.q1;
if(ch == 'c') state = States.q1;
if(ch == 'a') state = States.q1;
if(ch == '*') state = States.q1;
if(ch == '+') state = States.q1;
if(ch == 'l') state = States.q1;
if(ch == 'j') state = States.q1;
if(ch == '/') state = States.q1;
if(ch == 'k') state = States.q1;
if(ch == 'h') state = States.q1;
if(ch == 'i') state = States.q1;
if(ch == '-') state = States.q1;
if(ch == 'w') state = States.q1;
if(ch == 'v') state = States.q1;
if(ch == '1') state = States.q1;
if(ch == '0') state = States.q1;
if(ch == 's') state = States.q1;
if(ch == ';') state = States.q1;
if(ch == '~') state = States.q5;
if(ch == '=') state = States.q1;
break;
case q3:
if(ch == 'f') state = States.q1;
if(ch == 'd') state = States.q1;
if(ch == 'e') state = States.q1;
if(ch == 'b') state = States.q1;
if(ch == 'c') state = States.q1;
if(ch == 'a') state = States.q1;
if(ch == '*') state = States.q1;
if(ch == '+') state = States.q1;
if(ch == 'l') state = States.q1;
if(ch == 'j') state = States.q1;
if(ch == '/') state = States.q1;
if(ch == 'k') state = States.q1;
if(ch == 'h') state = States.q1;
if(ch == 'i') state = States.q2;
if(ch == '-') state = States.q1;
if(ch == 'w') state = States.q1;
if(ch == 'v') state = States.q1;
if(ch == '1') state = States.q1;
if(ch == '0') state = States.q1;
if(ch == 's') state = States.q1;
if(ch == ';') state = States.q1;
if(ch == '~') state = States.q1;
if(ch == '=') state = States.q1;
break;
}
}
if(Accepts.contains(state))
return true;
else
return false;
}
}

